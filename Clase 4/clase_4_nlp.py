# -*- coding: utf-8 -*-
"""Clase 4 NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ao5_MWbvz3ZtpaUjfknJwZIQlvuiZizG
"""

import numpy as np
import pandas as pd

"""Conectamos nuestro drive con colab para así trabajar con los archivos necesarios.

**Nota:** Si vamos a usar spyder, VS Code u otro editor, se usa...
```
df = pd.read_csv('Amazon_Unlocked_Mobile.csv')
```
"""

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

"""Usamos la libreria os que nos permite usar """

import os
os.chdir("/content/drive/My Drive/Mi curso/Clase 4") 
#!ls

df = pd.read_csv('Amazon_Unlocked_Mobile.csv')
df = df.sample(frac=0.25)
df.head()

# Descartar esos valores vacíos
df.dropna(inplace = True)
# Filtro para solo obtener calificacion buena o mala regular no
df=df[df['Rating'] != 3]
df['Positive Rated'] = np.where(df['Rating'] > 3,1,0)
df.head(10)

df['Positive Rated'].mean()

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(df['Reviews'],df['Positive Rated'], random_state=3)

print('X_train first entry: \n',X_train.iloc[0])

"""### **Caracterización**
Preparación especial para que sea utilir en el modelo de clasificación o regresión.
"""

from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer() # Instancia
vectorizer.fit(X_train)

print(vectorizer.vocabulary_)

vectorizer.get_feature_names()[4000:4010]

X_train_vectorized = vectorizer.transform(X_train)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train_vectorized,y_train)

from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay

predicts = model.predict(vectorizer.transform(X_test))
print('AUC: ',roc_auc_score(y_test, predicts))

print(confusion_matrix(y_test, predicts))
print("\n")
print(classification_report(y_test, predicts))

#style.use('classic')
cm = confusion_matrix(y_test, predicts, labels=model.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels=model.classes_)
disp.plot()

feature_names=np.array(vectorizer.get_feature_names())
##Orden los parametros del modelo
sorted_coef_index=model.coef_[0].argsort()
print('Smallest coef: \n{}\n'.format(feature_names[sorted_coef_index[1:10]]))
print('Largest coef: \n{}\n'.format(feature_names[sorted_coef_index[-20:-10]]))

from sklearn.feature_extraction.text import TfidfVectorizer

vect = TfidfVectorizer(min_df=5).fit(X_train)
len(vect.get_feature_names())

X_train_vectorizer = vect.transform(X_train)
model = LogisticRegression()
model.fit(X_train_vectorizer,y_train)
predictions = model.predict(vect.transform(X_test))
print('\n')
print('AUC: ',roc_auc_score(y_test, predictions))

print(model.predict(vect.transform(['this phone sucks i want to throw it away','i have loved this phone'])))

"""Realizamos la predicción con n-grams"""

vect = CountVectorizer(min_df=5,ngram_range=(1,2)).fit(X_train)
X_train_vectorized = vect.transform(X_train)
len(vect.get_feature_names())

model = LogisticRegression()
model.fit(X_train_vectorized,y_train)
predictions = model.predict(vect.transform(X_test))
print('\n')
print('AUC: ',roc_auc_score(y_test, predictions))

print(model.predict(vect.transform(['not a issue, this phone is ok','an issue, this phone is not worink'])))